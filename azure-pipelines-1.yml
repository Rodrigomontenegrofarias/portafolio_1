# Trigger automático para cambios en main
trigger:
  branches:
    include:
      - main
  tags:
    include:
      - v*

# Trigger para Pull Requests hacia main
pr:
- main

# Parámetros para seleccionar el tag a desplegar
parameters:
  - name: deployMode
    displayName: 'Modo de despliegue'
    type: string
    default: 'latest'
    values:
      - latest
      - specific
      - previous
  
  - name: specificTag
    displayName: 'Tag específico (solo si el modo es "specific")'
    type: string
    default: ''

pool:
  name: Default

variables:
  buildDir: 'build'
  tagToUse: ''

stages:
- stage: Build_And_Deploy
  jobs:
  - job: SelectTag
    displayName: 'Seleccionar tag para despliegue'
    steps:
    - checkout: self
      fetchDepth: 0  # Obtiene todo el historial y tags
      
    - script: |
        # Obtener la lista de tags ordenados por fecha (más reciente primero)
        ALL_TAGS=$(git tag --sort=-committerdate)
        
        # Establecer el tag que se va a usar según el modo seleccionado
        if [ "${{ parameters.deployMode }}" == "latest" ]; then
          # Usar el último tag
          DEPLOY_TAG=$(echo "$ALL_TAGS" | head -n 1)
          if [ -z "$DEPLOY_TAG" ]; then
            echo "No se encontraron tags. Usando la versión actual de main."
            DEPLOY_TAG="main"
          else
            echo "Usando último tag: $DEPLOY_TAG"
          fi
        
        elif [ "${{ parameters.deployMode }}" == "specific" ]; then
          # Usar el tag específico indicado
          DEPLOY_TAG="${{ parameters.specificTag }}"
          if [ -z "$DEPLOY_TAG" ]; then
            echo "##vso[task.logissue type=error]No se especificó un tag específico."
            exit 1
          fi
          echo "Usando tag específico: $DEPLOY_TAG"
        
        elif [ "${{ parameters.deployMode }}" == "previous" ]; then
          # Usar la versión anterior al último tag
          DEPLOY_TAG=$(echo "$ALL_TAGS" | head -n 2 | tail -n 1)
          if [ -z "$DEPLOY_TAG" ]; then
            echo "##vso[task.logissue type=error]No hay un tag anterior disponible."
            exit 1
          fi
          echo "Usando tag anterior: $DEPLOY_TAG"
        fi
        
        # Verificar que el tag existe si no es main
        if [ "$DEPLOY_TAG" != "main" ] && ! git rev-parse "$DEPLOY_TAG" >/dev/null 2>&1; then
          echo "##vso[task.logissue type=error]El tag $DEPLOY_TAG no existe."
          exit 1
        fi
        
        # Establecer la variable para usarla en los siguientes pasos
        echo "##vso[task.setvariable variable=tagToUse;isOutput=true]$DEPLOY_TAG"
      displayName: 'Determinar tag a desplegar'
      name: tagSelection

  - job: BuildAndDeploy
    dependsOn: SelectTag
    variables:
      deployTag: $[ dependencies.SelectTag.outputs['tagSelection.tagToUse'] ]
    steps:
    - checkout: self
      fetchDepth: 0
      
    # Dentro del job BuildAndDeploy, después del checkout y antes del npm install:
    - script: |
        echo "Preparando despliegue de versión: $(deployTag)"
        if [ "$(deployTag)" != "main" ]; then
          git checkout $(deployTag)
        fi
        
        # Crear un archivo con la información del tag para que React lo use
        echo "export const APP_VERSION = '$(deployTag)';" > src/version.js
        echo "export const BUILD_DATE = '$(date)';" >> src/version.js
        displayName: 'Checkout al tag seleccionado y generar información de versión'
      
      
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'

    # ✅ Archivar build
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(buildDir)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/build.zip'
        replaceExistingArchive: true
      displayName: 'Archive React build folder'

    # ✅ Publicar artefacto
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/build.zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish build artifact'

    # ✅ Desplegar a Netlify
    - script: |
        # Añadir información del tag al título del despliegue
        DEPLOY_TITLE="Deploy $(deployTag) from Azure DevOps"
        
        curl -X POST https://api.netlify.com/api/v1/sites/$(NETLIFY_SITE_ID)/deploys \
        -H "Authorization: Bearer $(NETLIFY_AUTH_TOKEN)" \
        -F "file=@$(Build.ArtifactStagingDirectory)/build.zip" \
        -F "title=$DEPLOY_TITLE"
      displayName: 'Deploy to Netlify'
      env:
        NETLIFY_AUTH_TOKEN: $(NETLIFY_AUTH_TOKEN)
        NETLIFY_SITE_ID: $(NETLIFY_SITE_ID)