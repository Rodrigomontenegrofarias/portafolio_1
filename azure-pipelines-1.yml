# Trigger automático para cambios en main
trigger:
  branches:
    include:
      - main
  tags:
    include:
      - V*

# Trigger para Pull Requests hacia main
pr:
- main

# Parámetros para seleccionar el tag a desplegar
parameters:
  - name: deployMode
    displayName: 'Modo de despliegue'
    type: string
    default: 'latest'
    values:
      - latest
      - specific
      - previous
  
  - name: specificTag
    displayName: 'Tag específico (solo si el modo es "specific")'
    type: string
    default: ''

pool:
  name: Default

variables:
  buildDir: 'build'
  tagToUse: ''

stages:
- stage: Build_And_Deploy
  jobs:
  - job: SelectTag
    displayName: 'Seleccionar tag para despliegue'
    steps:
    - checkout: self
      fetchDepth: 0  # Obtiene todo el historial y tags

    - script: |
        # Obtener la lista de tags ordenados por fecha de creación
        ALL_TAGS=$(git for-each-ref --sort=-creatordate --format '%(refname:strip=2)' refs/tags | grep '^v')

        # Establecer el tag que se va a usar según el modo seleccionado
        if [ "${{ parameters.deployMode }}" == "latest" ]; then
          DEPLOY_TAG=$(echo "$ALL_TAGS" | head -n 1)
          if [ -z "$DEPLOY_TAG" ]; then
            echo "No se encontraron tags. Usando la versión actual de main."
            DEPLOY_TAG="main"
          else
            echo "Usando último tag: $DEPLOY_TAG"
          fi

        elif [ "${{ parameters.deployMode }}" == "specific" ]; then
          DEPLOY_TAG="${{ parameters.specificTag }}"
          if [ -z "$DEPLOY_TAG" ]; then
            echo "##vso[task.logissue type=error]No se especificó un tag específico."
            exit 1
          fi
          echo "Usando tag específico: $DEPLOY_TAG"

        elif [ "${{ parameters.deployMode }}" == "previous" ]; then
          DEPLOY_TAG=$(echo "$ALL_TAGS" | head -n 2 | tail -n 1)
          if [ -z "$DEPLOY_TAG" ]; then
            echo "##vso[task.logissue type=error]No hay un tag anterior disponible."
            exit 1
          fi
          echo "Usando tag anterior: $DEPLOY_TAG"
        fi

        if [ "$DEPLOY_TAG" != "main" ] && ! git rev-parse "$DEPLOY_TAG" >/dev/null 2>&1; then
          echo "##vso[task.logissue type=error]El tag $DEPLOY_TAG no existe."
          exit 1
        fi

        echo "##vso[task.setvariable variable=tagToUse;isOutput=true]$DEPLOY_TAG"
      displayName: 'Determinar tag a desplegar'
      name: tagSelection

  - job: BuildAndDeploy
    dependsOn: SelectTag
    variables:
      deployTag: $[ dependencies.SelectTag.outputs['tagSelection.tagToUse'] ]
    steps:
    - checkout: self
      fetchDepth: 0

    - script: |
        echo "Preparando despliegue de versión: $deployTag"
        if [ "$deployTag" != "main" ]; then
          git checkout "$deployTag"
        fi
      displayName: 'Checkout al tag seleccionado'

    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        echo "REACT_APP_TAG=$deployTag" > .env
      displayName: 'Crear archivo .env con versión'

    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(buildDir)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/build.zip'
        replaceExistingArchive: true
      displayName: 'Archive React build folder'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/build.zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish build artifact'

    - script: |
        DEPLOY_TITLE="Deploy $deployTag from Azure DevOps"

        response=$(curl -s -o response.json -w "%{http_code}" -X POST https://api.netlify.com/api/v1/sites/$(NETLIFY_SITE_ID)/deploys \
        -H "Authorization: Bearer $(NETLIFY_AUTH_TOKEN)" \
        -F "file=@$(Build.ArtifactStagingDirectory)/build.zip" \
        -F "title=$DEPLOY_TITLE")

        if [ "$response" -ne 200 ]; then
          echo "##vso[task.logissue type=error]Falló el despliegue a Netlify. Código HTTP: $response"
          cat response.json
          exit 1
        fi
      displayName: 'Deploy to Netlify'
      env:
        NETLIFY_AUTH_TOKEN: $(NETLIFY_AUTH_TOKEN)
        NETLIFY_SITE_ID: $(NETLIFY_SITE_ID)