trigger:
  tags:
    include:
      - V*

pr:
  branches:
    include:
      - main

parameters:
  - name: deployMode
    displayName: 'Modo de despliegue'
    type: string
    default: 'latest'
    values:
      - latest
      - specific
      - previous

pool:
  name: Default

variables:
  buildDir: 'build'
  tagToUse: ''

stages:
- stage: Build_And_Deploy
  jobs:
  - job: SelectTag
    displayName: 'Seleccionar tag para despliegue'
    steps:
    - checkout: self
      fetchDepth: 0
      
    - script: |
        ALL_TAGS=$(git tag --sort=-committerdate)
        # Lógica para seleccionar el tag...
        echo "##vso[task.setvariable variable=tagToUse;isOutput=true]$DEPLOY_TAG"
      displayName: 'Determinar tag a desplegar'
      name: tagSelection

  - job: BuildAndDeploy
    dependsOn: SelectTag
    variables:
      deployTag: $[ dependencies.SelectTag.outputs['tagSelection.tagToUse'] ]
    steps:
    - checkout: self
      fetchDepth: 0
      
    - script: |
        echo "Actualizando latestTag.txt con la nueva versión..."
        echo "$(deployTag)" > latestTag.txt
      displayName: 'Actualizar latestTag.txt con el nuevo tag'

    - script: |
        echo "Preparando despliegue de versión: $(deployTag)"
        if [ "$(deployTag)" != "main" ]; then
          git checkout $(deployTag)
        fi
      displayName: 'Checkout al tag seleccionado'
      
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'

    # ✅ Archivar build
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(buildDir)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/build.zip'
        replaceExistingArchive: true
      displayName: 'Archive React build folder'

    # ✅ Publicar artefacto
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/build.zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish build artifact'

    # ✅ Desplegar a Netlify
    - script: |
        DEPLOY_TITLE="Deploy $(deployTag) from Azure DevOps"
        
        curl -X POST https://api.netlify.com/api/v1/sites/$(NETLIFY_SITE_ID)/deploys \
        -H "Authorization: Bearer $(NETLIFY_AUTH_TOKEN)" \
        -F "file=@$(Build.ArtifactStagingDirectory)/build.zip" \
        -F "title=$DEPLOY_TITLE"
      displayName: 'Deploy to Netlify'
      env:
        NETLIFY_AUTH_TOKEN: $(NETLIFY_AUTH_TOKEN)
        NETLIFY_SITE_ID: $(NETLIFY_SITE_ID)