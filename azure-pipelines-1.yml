# azure-pipelines.yml
# Configuración para activarse cuando se hace merge hacia main
trigger:
  branches:
    include:
    - main  # Se activa cuando se hace push/merge a main
  paths:
    exclude:
    - README.md
    - docs/*

# Desactivar PRs (solo queremos que se active en merge completado)
pr: none

pool:
  name: Default

variables:
  # Variables del sistema
  system.debug: false
  # Variables del proyecto
  deployTag: $(Build.BuildNumber)
  branchName: $(Build.SourceBranchName)
  commitMessage: $(Build.SourceVersionMessage)
  commitAuthor: $(Build.RequestedFor)
  buildReason: $(Build.Reason)

stages:
  - stage: StatusUpdate
    displayName: 'Update Merge Status'
    jobs:
      - job: StatusJob
        displayName: 'Merge Status Tracking'
        steps:
          - script: |
              echo "=== MERGE A MAIN DETECTADO ==="
              echo "Branch: $(branchName)"
              echo "Build Reason: $(buildReason)"  
              echo "Commit Message: $(commitMessage)"
              echo "Autor: $(commitAuthor)"
              echo "Build Number: $(Build.BuildNumber)"
              echo "Commit ID: $(Build.SourceVersion)"
              echo "Timestamp: $(date)"
              echo "================================"
              
              # Registrar merge en log de estatutos
              echo "$(date): MERGE to main - Build $(Build.BuildNumber) - Author: $(commitAuthor) - Commit: $(Build.SourceVersion)" >> merge_status.log
              
              # Aquí puedes agregar más lógica:
              # - Notificaciones
              # - Actualización de base de datos
              # - Registro en sistemas de tracking
              
            displayName: 'Log Merge Status'

  - stage: Build
    displayName: 'Build and Package'
    dependsOn: StatusUpdate
    jobs:
      - job: BuildJob
        displayName: 'Build Job'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '16.x'
            displayName: 'Install Node.js'

          - script: |
              npm ci
            displayName: 'Install dependencies'

          - script: |
              npm run build
            displayName: 'Build project'
            env:
                REACT_APP_EMAILJS_SERVICE_ID: $(REACT_APP_EMAILJS_SERVICE_ID)
                REACT_APP_EMAILJS_TEMPLATE_ID: $(REACT_APP_EMAILJS_TEMPLATE_ID)
                REACT_APP_EMAILJS_PUBLIC_KEY: $(REACT_APP_EMAILJS_PUBLIC_KEY)

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/build'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/build.zip'
              replaceExistingArchive: true
            displayName: 'Archive build files'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'drop'
            displayName: 'Publish artifacts'

  - stage: Deploy
    displayName: 'Deploy to Production'
    dependsOn: Build
    jobs:
      - job: DeployJob
        displayName: 'Deploy Job'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download build artifacts'

          - script: |
              # Despliegue después de merge exitoso
              DEPLOY_TITLE="Production Deploy $(deployTag) - Merged to main"
              
              echo "Iniciando despliegue de producción después de merge..."
              
              DEPLOY_RESPONSE=$(curl -s -X POST https://api.netlify.com/api/v1/sites/$(NETLIFY_SITE_ID)/deploys \
              -H "Authorization: Bearer $(NETLIFY_AUTH_TOKEN)" \
              -F "file=@$(System.ArtifactsDirectory)/drop/build.zip" \
              -F "title=$DEPLOY_TITLE")
              
              echo "Respuesta de despliegue: $DEPLOY_RESPONSE"
              
              # Extraer ID del despliegue
              DEPLOY_ID=$(echo $DEPLOY_RESPONSE | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
              
              if [ -z "$DEPLOY_ID" ]; then
                echo "Error: No se pudo obtener el ID del despliegue"
                exit 1
              fi
              
              echo "ID del despliegue: $DEPLOY_ID"
              
              # Esperar procesamiento
              echo "Esperando que el despliegue se complete..."
              sleep 30
              
              # Retry con cache clearing
              echo "Ejecutando limpieza de caché y retry..."
              
              RETRY_RESPONSE=$(curl -s -X POST https://api.netlify.com/api/v1/sites/$(NETLIFY_SITE_ID)/deploys/$DEPLOY_ID/retry \
              -H "Authorization: Bearer $(NETLIFY_AUTH_TOKEN)" \
              -H "Content-Type: application/json" \
              -d '{"clear_cache":true}')
              
              echo "Respuesta de retry: $RETRY_RESPONSE"
              
              # Confirmar despliegue de producción
              if echo $RETRY_RESPONSE | grep -q '"state":"enqueued"'; then
                echo "Despliegue de producción iniciado exitosamente después del merge"
              else
                echo "Advertencia: Verificar estado del despliegue en Netlify dashboard"
              fi
              
            displayName: 'Deploy Production After Merge'
            env:
              NETLIFY_AUTH_TOKEN: $(NETLIFY_AUTH_TOKEN)
              NETLIFY_SITE_ID: $(NETLIFY_SITE_ID)

  - stage: PostDeploy
    displayName: 'Post Merge Status'
    dependsOn: Deploy
    jobs:
      - job: FinalStatus
        displayName: 'Final Status Update'
        steps:
          - script: |
              echo "=== MERGE COMPLETADO ==="
              echo "Branch: $(branchName)"
              echo "Commit: $(Build.SourceVersion)"
              echo "Autor: $(commitAuthor)"
              echo "Build: $(Build.BuildNumber)"
              echo "Deploy completado a producción"
              echo "Timestamp: $(date)"
              echo "Status: PRODUCCIÓN ACTUALIZADA"
              echo "========================"
              
              # Registro final del merge exitoso
              echo "$(date): MERGE COMPLETED - Build $(Build.BuildNumber) - Production deployed successfully" >> merge_status.log
              echo "$(REACT_APP_EMAILJS_SERVICE_ID)"
              echo "$(REACT_APP_EMAILJS_TEMPLATE_ID)"
              echo "$(REACT_APP_EMAILJS_PUBLIC_KEY)"

              # Aquí puedes agregar:
              # - Notificaciones de merge exitoso
              # - Actualización de sistemas de tracking
              # - Alertas a stakeholders
              # - Integración con herramientas de monitoreo
              
            displayName: 'Final Merge Status'